
# FILE: ./collaborative_text_editor/asgi.py
# collaborative_text_editor/asgi.py

import os

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'collaborative_text_editor.settings')

import django
django.setup()

from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
from django.core.asgi import get_asgi_application
from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler  # Add this import
import editor.routing

application = ProtocolTypeRouter({
    "http": ASGIStaticFilesHandler(get_asgi_application()),  # Wrap with ASGIStaticFilesHandler
    "websocket": AuthMiddlewareStack(
        URLRouter(
            editor.routing.websocket_urlpatterns
        )
    ),
})

# FILE: ./collaborative_text_editor/__init__.py

# FILE: ./collaborative_text_editor/settings.py
"""
Django settings for collaborative_text_editor project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
# Set up templates directory
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)20lo0tmyxgox2conr)i8s+uewbk^oaqd#6bt#m&un7%q5oc+4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']



# Application definition

INSTALLED_APPS = [
    'channels',          # For WebSocket support
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'editor',            # Your app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'collaborative_text_editor.urls'

# settings.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'collaborative_text_editor.wsgi.application'

# collaborative_text_editor/settings.py

CSRF_TRUSTED_ORIGINS = [
    'https://cb87-125-22-40-140.ngrok-free.app'
]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True



# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ASGI application for Channels
ASGI_APPLICATION = 'collaborative_text_editor.asgi.application'

# Channel layers configuration (using In-Memory Channel Layer for development)
# collaborative_text_editor/settings.py

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('localhost', 6379)],
            'capacity': 10000,  # Increase capacity as needed
            'group_expiry': 60 * 60,  # Keep groups alive for 1 hour
        },
    },
}




LOGIN_URL = 'login'

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Authentication settings
LOGIN_REDIRECT_URL = 'document_list'
LOGOUT_REDIRECT_URL = 'login'



# FILE: ./collaborative_text_editor/urls.py
"""collaborative_text_editor URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
# collaborative_text_editor/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('editor.urls')),
]

# FILE: ./collaborative_text_editor/wsgi.py
"""
WSGI config for collaborative_text_editor project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'collaborative_text_editor.settings')

application = get_wsgi_application()

# FILE: ./static/css/styles.css
/* static/css/styles.css */

body {
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    background-color: #f7f7f7;
}

header {
    background-color: #fff;
    padding: 10px 20px;
    border-bottom: 1px solid #e0e0e0;
}

main {
    margin: 20px;
}

#editor-container {
    height: 600px;
    border: 1px solid #ccc;
    background-color: #fff;
}

#active-users {
    margin-top: 20px;
}

#active-users-list div {
    margin-bottom: 5px;
}

.navbar-brand {
    font-weight: bold;
}

.form-inline .form-control {
    width: auto;
}

footer {
    background-color: #fff;
    padding: 10px 20px;
    border-top: 1px solid #e0e0e0;
    text-align: center;
}

/* Quill editor adjustments */
.ql-toolbar.ql-snow {
    border: none;
    border-bottom: 1px solid #ccc;
}

.ql-container.ql-snow {
    border: none;
}

 /* Styles for quill-cursors */
 .ql-cursor {
    position: absolute;
    pointer-events: none;
    transform: translateY(-1px);
    opacity: 1;
    z-index: 1000;
    will-change: left, top;
}

.ql-cursor .ql-cursor-flag {
    position: absolute;
    transform: translateY(-100%);
    white-space: nowrap;
}

.ql-cursor .ql-cursor-name {
    display: inline-block;
    padding: 2px 5px;
    font-size: 12px;
    line-height: 1;
    color: #fff;
    background-color: #000;
    border-radius: 4px;
}

.ql-cursor .ql-cursor-caret {
    position: absolute;
    width: 2px;
    background-color: black;
    animation: ql-blink 1s infinite;
}

@keyframes ql-blink {
    0% { opacity: 1 }
    50% { opacity: 1 }
    50.01% { opacity: 0 }
    100% { opacity: 0 }
}
# FILE: ./templates/base.html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Collaborative Text Editor</title>
    <!-- Include Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <!-- Custom Styles -->
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">

    {% block extra_head %} {% endblock %}
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="{% url 'document_list' %}">
            <!-- Optional: Add a logo -->
            <!-- <img src="{% static 'images/logo.png' %}" width="30" height="30" class="d-inline-block align-top" alt=""> -->
            CollabDocs
        </a>
        <div class="collapse navbar-collapse">
            {% if user.is_authenticated %}
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'document_create' %}">New Document</a>
                </li>
            </ul>
            <span class="navbar-text">
                Welcome, {{ user.username }} |
                <form action="{% url 'logout' %}" method="post" style="display: inline;">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-link btn-sm" style="padding: 0;">Logout</button>
                </form>
            </span>
            {% else %}
            <span class="navbar-text">
                <a href="{% url 'login' %}">Login</a> | <a href="{% url 'register' %}">Register</a>
            </span>
            {% endif %}
        </div>
    </nav>

    <div class="container-fluid">
        {% block content %}{% endblock %}
    </div>

    <!-- Footer -->
    <footer>
        <p>&copy; 2024 CollabDocs</p>
    </footer>

    <!-- Include jQuery, Popper.js, and Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" integrity="sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s" crossorigin="anonymous"></script>
    {% block extra_script %} {% endblock %}
</body>
</html>

# FILE: ./templates/document_list.html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5">
    <h2>Your Documents</h2>
    <ul class="list-group mt-3">
        {% for document in documents %}
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <a href="{% url 'document_edit' document.pk %}">{{ document.title }}</a>
                <!-- Delete Button -->
                <form action="{% url 'document_delete' document.pk %}" method="post" style="margin: 0;">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this document?');">Delete</button>
                </form>
            </li>
        {% empty %}
            <li class="list-group-item">No documents yet.</li>
        {% endfor %}
    </ul>
    <a href="{% url 'document_create' %}" class="btn btn-success mt-3">Create New Document</a>
</div>
{% endblock %}

# FILE: ./templates/document_confirm_delete.html
{% extends 'base.html' %}

{% block content %}
<h2>Delete Document</h2>
<p>Are you sure you want to delete "{{ document.title }}"?</p>
<form method="post">
    {% csrf_token %}
    <button type="submit">Confirm Delete</button>
    <a href="{% url 'document_list' %}">Cancel</a>
</form>
{% endblock %}

# FILE: ./templates/register.html
{% extends 'base.html' %}

{% block content %}
<h2>Register</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Register</button>
</form>
{% endblock %}
# FILE: ./templates/editor.html
{% extends 'base.html' %}

{% block extra_head %}
<!-- Include Quill stylesheet -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

<!-- Custom CSS for comments and cursors -->
<style>
    #comments-container {
        background-color: #f9f9f9;
        border-left: 1px solid #ccc;
        padding: 10px;
        overflow-y: auto;
        height: calc(100vh - 100px);
    }

    .comment {
        border-bottom: 1px solid #ddd;
        padding: 5px 0;
        cursor: pointer; /* Make comments clickable */
    }

    .comment .content {
        margin-bottom: 5px;
    }

    .comment .meta {
        font-size: 12px;
        color: #666;
    }

    .comment .resolve-btn {
        font-size: 12px;
        color: #007bff;
        cursor: pointer;
    }

    .commented-text {
        background-color: #ffff00; /* Yellow background */
        cursor: pointer;
    }

    .comment.highlight {
        background-color: #ffeeba; /* Light yellow */
    }

   
</style>
{% endblock %}

{% block content %}
<div class="container-fluid my-5">
    <div class="row">
        <!-- Editor Column -->
        <div class="col-md-9">
            <!-- Document Title and Sharing Options -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 contenteditable="true" id="document-title" class="mb-0">{{ document.title }}</h4>
                <!-- Share Button -->
                <button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#collaboratorsModal">
                    Share
                </button>
            </div>

            <!-- Editor Container -->
            <div id="editor-container" style="height: 500px;"></div>

            <!-- Active Users List -->
            <div id="active-users" class="mt-4">
                <h6>Active Users:</h6>
                <div id="active-users-list" class="d-flex flex-wrap">
                    <!-- Active users will be listed here -->
                </div>
            </div>
        </div>

        <!-- Comments Sidebar -->
        <div class="col-md-3" id="comments-container">
            <h5>Comments</h5>
            <!-- Comments will be dynamically inserted here -->
        </div>
    </div>
</div>


<!-- Collaborators Modal -->
<div class="modal fade" id="collaboratorsModal" tabindex="-1" aria-labelledby="collaboratorsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form method="post" id="collaborators-form">
          {% csrf_token %}
          <input type="hidden" name="form_type" value="collaborators_form">
          <div class="modal-header">
            <h5 class="modal-title" id="collaboratorsModalLabel">Share Document</h5>
          </div>
          <div class="modal-body">
            {{ collaborators_form.non_field_errors }}
            {% for field in collaborators_form %}
                <div class="form-group">
                    {{ field.label_tag }}
                    {{ field }}
                    {% if field.help_text %}
                        <small class="form-text text-muted">{{ field.help_text }}</small>
                    {% endif %}
                    {% for error in field.errors %}
                        <div class="invalid-feedback">
                            {{ error }}
                        </div>
                    {% endfor %}
                </div>
            {% endfor %}
          </div>
          <div class="modal-footer">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Close</button>
          </div>
        </form>
      </div>
    </div>
</div>
{% endblock %}

{% block extra_script %}
<!-- Include Quill library -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<!-- Include quill-cursors script -->
<script src="https://cdn.jsdelivr.net/npm/quill-cursors@3.0.0/dist/quill-cursors.min.js"></script>

<!-- Initialize Quill editor and WebSocket -->
<script>
    // Register QuillCursors module
    Quill.register('modules/cursors', window.QuillCursors);

    // Register the icon for 'comment'
    var icons = Quill.import('ui/icons');
    icons['comment'] = '<svg viewBox="0 0 18 18"><path d="M3 3h12v10H5l-2 2V3z"></path></svg>';

    // Define the 'comment' class attributor
    var Parchment = Quill.import('parchment');

    var CommentClass = new Parchment.Attributor.Class('comment', 'commented-text', {
        scope: Parchment.Scope.INLINE
    });

    // Define the 'comment' attribute attributor
    var CommentAttribute = new Parchment.Attributor.Attribute('comment', 'data-comment-id', {
        scope: Parchment.Scope.INLINE
    });

    Quill.register(CommentClass, true);
    Quill.register(CommentAttribute, true);

    // Initialize Quill editor with cursors module and toolbar enabled
    const quill = new Quill('#editor-container', {
        theme: 'snow',
        modules: {
            cursors: true,
            toolbar: {
                container: [
                    [{ 'font': [] }, { 'size': [] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'script': 'super' }, { 'script': 'sub' }],
                    [{ 'header': '1' }, { 'header': '2' }, 'blockquote', 'code-block'],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'indent': '-1' }, { 'indent': '+1' }],
                    [{ 'direction': 'rtl' }, { 'align': [] }],
                    ['link', 'image', 'video', 'formula'],
                    ['clean'],
                    ['comment']  // Add the 'comment' button
                ],
                handlers: {
                    'comment': function() {
                        var range = quill.getSelection();
                        if (range && range.length > 0) {
                            var commentContent = prompt('Enter your comment:');
                            if (commentContent) {
                                // Send the comment to the server
                                var message = JSON.stringify({
                                    'type': 'comment',
                                    'comment': {
                                        'range': range,
                                        'content': commentContent
                                    }
                                });
                                socket.send(message);

                                // Apply the 'comment' format with the comment ID
                                // Use a temporary ID; the server should send back the actual ID
                                quill.formatText(range.index, range.length, 'comment', 'temp-' + Date.now());

                                // Move the cursor to the end of the formatted range
                                quill.setSelection(range.index + range.length, 0);

                                // Reset the 'comment' format so that new text does not inherit it
                                quill.format('comment', false);
                            }
                        } else {
                            alert('Please select text to comment on.');
                        }
                    }
                }
            }
        }
    });

    const cursors = quill.getModule('cursors');

    // Debounce function to delay execution until after events stop firing
    function debounce(func, wait) {
        let timeout;
        return function() {
            const context = this, args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(function() {
                func.apply(context, args);
            }, wait);
        };
    }

    const debouncedSendCursorPosition = debounce(sendCursorPosition, 100);

    // Set up WebSocket connection
    const wsScheme = window.location.protocol === "https:" ? "wss" : "ws";
    const documentId = "{{ document.pk }}";
    const socketUrl = `${wsScheme}://${window.location.host}/ws/document/${documentId}/`;
    const socket = new WebSocket(socketUrl);

    const myUserId = "{{ user.id }}";  // Store user ID as a string

    socket.onopen = function() {
        console.log('WebSocket connection established.');
        // Send initial cursor position
        sendCursorPosition();
    };

    // Function to dynamically find all ranges associated with a comment ID
    function findCommentRanges(commentId) {
        const delta = quill.getContents();
        let index = 0;
        let ranges = [];

        delta.ops.forEach(op => {
            let insertLength;
            if (typeof op.insert === 'string') {
                insertLength = op.insert.length;
            } else {
                insertLength = 1; // For embeds like images
            }

            if (op.attributes && op.attributes.comment === commentId.toString()) {
                ranges.push({ index: index, length: insertLength });
            }
            index += insertLength;
        });

        return ranges;
    }

    // Function to display a comment
    function displayComment(data) {
        var commentsContainer = document.getElementById('comments-container');
        if (!commentsContainer) {
            return;
        }
        var commentDiv = document.createElement('div');
        commentDiv.classList.add('comment');
        commentDiv.id = 'comment-' + data.comment.id;
        commentDiv.innerHTML = `
            <div class="content">${data.comment.content}</div>
            <div class="meta">By ${data.username}</div>
            <div class="resolve-btn" onclick="resolveComment(${data.comment.id}); event.stopPropagation();">Resolve</div>
        `;
        commentsContainer.appendChild(commentDiv);

        // Update the 'comment' format with the actual comment ID
        quill.formatText(
            data.comment.range.index,
            data.comment.range.length,
            'comment',
            data.comment.id
        );

        // Add event listeners for hovering over the comment
        commentDiv.addEventListener('mouseenter', function() {
            highlightText(data.comment.id);
        });

        commentDiv.addEventListener('mouseleave', function() {
            removeTextHighlight(data.comment.id);
        });

        // Add event listener for clicking on the comment
        commentDiv.addEventListener('click', function() {
            navigateToEditorComment(data.comment.id);
        });
    }

    // Function to highlight text when hovering over a comment
    function highlightText(commentId) {
        let ranges = findCommentRanges(commentId);
        ranges.forEach(range => {
            quill.formatText(range.index, range.length, {
                'background': '#ffd700' // Gold color when hovering
            }, 'silent');
        });
    }

    // Function to remove the highlight from text
    function removeTextHighlight(commentId) {
        let ranges = findCommentRanges(commentId);
        ranges.forEach(range => {
            quill.formatText(range.index, range.length, {
                'background': '#ffff00' // Original highlight color
            }, 'silent');
        });
    }

    // Function to navigate to the comment in the editor
    function navigateToEditorComment(commentId) {
        let ranges = findCommentRanges(commentId);
        if (ranges.length > 0) {
            let range = ranges[0]; // Navigate to the first range
            // Scroll to the comment's position in the editor
            quill.scrollIntoView(quill.getBounds(range.index));

            // Set the selection to highlight the text (optional)
            quill.setSelection(range.index, range.length, 'silent');

            // Optionally, add a temporary highlight to draw attention
            quill.formatText(range.index, range.length, { 'background': '#add8e6' }, 'silent'); // Light blue
            setTimeout(() => {
                quill.formatText(range.index, range.length, { 'background': '#ffff00' }, 'silent'); // Revert to original
            }, 2000);
        }
    }

    // Function to remove a comment from the sidebar and editor
    function removeComment(commentId, isLocal = false) {
        var commentDiv = document.getElementById('comment-' + commentId);
        if (commentDiv) {
            commentDiv.remove();
        }

        let ranges = findCommentRanges(commentId);
        if (ranges.length > 0) {
            ranges.forEach(range => {
                // Remove the 'comment' format from the specified range
                quill.formatText(range.index, range.length, 'comment', false, 'silent');
            });

            if (isLocal) {
                // If the removal is initiated locally (by resolving the comment),
                // send a delta to the server to inform other clients.
                let delta = new Quill.import('delta')();
                let position = 0;
                ranges.forEach(range => {
                    delta.retain(range.index - position);
                    delta.retain(range.length, { 'comment': false });
                    position = range.index + range.length;
                });

                var message = JSON.stringify({ 'type': 'delta', 'delta': delta.ops });
                socket.send(message);
            }
        }
    }

    // Function to resolve a comment
    function resolveComment(commentId) {
        // Send a message to the server to resolve the comment
        var message = JSON.stringify({
            'type': 'resolve_comment',
            'comment_id': commentId
        });
        socket.send(message);

        // Remove the comment locally and indicate it's a local action
        removeComment(commentId, true);
    }

    socket.onmessage = function(e) {
        const data = JSON.parse(e.data);
        if (data.type === 'init') {
            // Set the initial content
            quill.setContents(data.content);
        } else if (data.type === 'delta') {
            // Apply the delta to the Quill editor
            const delta = { ops: data.delta };
            quill.updateContents(delta);

            // Transform the cursors based on the delta
            cursors.transformCursors(delta);
        } else if (data.type === 'cursor') {
            // Update cursor position
            if (data.user_id !== myUserId) {
                const userIdStr = data.user_id.toString();
                // Check if cursor already exists
                if (!cursors.cursors()[userIdStr]) {
                    cursors.createCursor(userIdStr, data.username, data.color);
                }
                if (data.range) {
                    cursors.moveCursor(userIdStr, {
                        index: Number(data.range.index),
                        length: Number(data.range.length)
                    });
                } else {
                    cursors.removeCursor(userIdStr);
                }
            }
        } else if (data.type === 'comment') {
            // Display the comment
            displayComment(data);
        } else if (data.type === 'resolve_comment') {
            // Remove the comment without sending a delta back
            removeComment(data.comment_id, false);
        } else if (data.type === 'user_left') {
            // Remove cursor when user disconnects
            cursors.removeCursor(data.user_id.toString());
        } else if (data.type === 'active_users') {
            // Update the list of active users
            updateActiveUsersList(data.users);
        }
    };

    socket.onerror = function(e) {
        console.error('WebSocket error:', e);
    };

    socket.onclose = function() {
        console.log('WebSocket connection closed.');
    };

    // Send changes to the server
    quill.on('text-change', function(delta, oldDelta, source) {
        if (source === 'user') {
            const deltaOps = delta.ops;
            const message = JSON.stringify({'type': 'delta', 'delta': deltaOps});
            socket.send(message);

            // Send cursor position (debounced)
            debouncedSendCursorPosition();
        }
    });

    // Send cursor position to the server (debounced)
    quill.on('selection-change', function(range, oldRange, source) {
        if (source === 'user') {
            debouncedSendCursorPosition();
        }
    });

    function sendCursorPosition() {
        const range = quill.getSelection();
        const message = JSON.stringify({
            'type': 'cursor',
            'range': range
        });
        socket.send(message);
    }

    // Function to update active users list
    function updateActiveUsersList(users) {
        const activeUsersListContainer = document.getElementById('active-users-list');
        if (activeUsersListContainer) {
            activeUsersListContainer.innerHTML = '';
            users.forEach(function(user) {
                const userElement = document.createElement('div');
                userElement.className = 'me-3 text-center mb-3';

                const avatar = document.createElement('div');
                avatar.style.width = '40px';
                avatar.style.height = '40px';
                avatar.style.borderRadius = '50%';
                avatar.style.backgroundColor = user.color;
                avatar.style.color = '#fff';
                avatar.style.display = 'flex';
                avatar.style.alignItems = 'center';
                avatar.style.justifyContent = 'center';
                avatar.style.fontWeight = 'bold';
                avatar.textContent = user.username.charAt(0).toUpperCase();

                const username = document.createElement('div');
                username.style.fontSize = '12px';
                username.textContent = user.username;

                userElement.appendChild(avatar);
                userElement.appendChild(username);
                activeUsersListContainer.appendChild(userElement);
            });
        }
    }

    // Update document title
    const titleElement = document.getElementById('document-title');
    titleElement.addEventListener('blur', function() {
        const newTitle = titleElement.textContent.trim();
        if (newTitle !== "{{ document.title }}") {
            // Send a POST request to update the title
            fetch("{% url 'document_edit' document.pk %}", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': '{{ csrf_token }}'
                },
                body: JSON.stringify({ 'title': newTitle })
            })
            .then(response => {
                if (response.ok) {
                    console.log('Title updated successfully.');
                } else {
                    console.error('Error updating title:', response.statusText);
                }
            })
            .catch(error => {
                console.error('Error updating title:', error);
            });
        }
    });

    // Load existing comments when initializing the editor
    fetch("{% url 'get_comments' document.pk %}")
        .then(response => response.json())
        .then(data => {
            data.comments.forEach(comment => {
                displayComment({
                    comment: comment,
                    username: comment.username
                });
            });
        });
</script>
{% endblock %}
# FILE: ./templates/login.html
{% extends 'base.html' %}

{% block content %}
<h2>Login</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Login</button>
</form>
{% endblock %}
# FILE: ./templates/document_create.html
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5">
    <h2>Create New Document</h2>
    <form method="post" class="mt-4">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Create</button>
    </form>
</div>
{% endblock %}

# FILE: ./manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'collaborative_text_editor.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

# FILE: ./editor/migrations/0004_comment.py
# Generated by Django 4.2.5 on 2024-11-24 16:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("editor", "0003_remove_document_owner_document_collaborators"),
    ]

    operations = [
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("range", models.JSONField()),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("resolved", models.BooleanField(default=False)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="editor.document",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]

# FILE: ./editor/migrations/0003_remove_document_owner_document_collaborators.py
# Generated by Django 5.1.3 on 2024-11-14 22:05

from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("editor", "0002_alter_document_content"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name="document",
            name="owner",
        ),
        migrations.AddField(
            model_name="document",
            name="collaborators",
            field=models.ManyToManyField(
                related_name="documents", to=settings.AUTH_USER_MODEL
            ),
        ),
    ]

# FILE: ./editor/migrations/__init__.py

# FILE: ./editor/migrations/0001_initial.py
# Generated by Django 5.1.3 on 2024-11-14 11:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]

# FILE: ./editor/migrations/0002_alter_document_content.py
# Generated by Django 5.1.3 on 2024-11-14 21:34

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("editor", "0001_initial"),
    ]

    operations = [
        migrations.AlterField(
            model_name="document",
            name="content",
            field=models.TextField(blank=True, default=""),
        ),
    ]

# FILE: ./editor/models.py
# editor/models.py

from django.db import models
from django.contrib.auth.models import User

class Document(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField(blank=True, default='')  # Store the document content as JSON
    # Remove the owner field
    # owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='documents')
    # Add collaborators field
    collaborators = models.ManyToManyField(User, related_name='documents')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
        
    def __str__(self):
        return self.title

# Add the Comment model below the Document model
class Comment(models.Model):
    document = models.ForeignKey(Document, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    # Store the range as JSON: {'index': int, 'length': int}
    range = models.JSONField()
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    resolved = models.BooleanField(default=False)

    def __str__(self):
        return f'Comment by {self.user.username} on {self.document.title}'
# FILE: ./editor/consumers.py
# editor/consumers.py

from channels.generic.websocket import AsyncWebsocketConsumer
from asgiref.sync import sync_to_async
from .models import Document, Comment  # Add Comment here
from django.contrib.auth.models import User
import json
import random
from delta import Delta  # Ensure this is the correct package

class DocumentConsumer(AsyncWebsocketConsumer):
    active_users_dict = {}   # Class variable to keep track of active users

    async def connect(self):
        self.document_id = self.scope['url_route']['kwargs']['document_id']
        self.room_group_name = f'document_{self.document_id}'
        self.user = self.scope["user"]
        self.color = await self.get_user_color(self.user.id)  # Assign a color to the user

        # Authenticate user
        if self.user.is_anonymous:
            await self.close()
        else:
            # Check if the user is a collaborator
            has_permission = await self.check_permission()
            if not has_permission:
                await self.close()
            else:
                # Add user to active users
                await self.add_active_user()

                # Join room group
                await self.channel_layer.group_add(
                    self.room_group_name,
                    self.channel_name
                )

                await self.accept()

                # Send the initial content
                document = await self.get_document()
                content = json.loads(document.content) if document.content else {'ops': []}
                await self.send(text_data=json.dumps({
                    'type': 'init',
                    'content': content
                }))

                # Notify others about the new active user
                await self.broadcast_active_users()

    async def disconnect(self, close_code):
        # Remove user from active users
        await self.remove_active_user()

        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

        # Notify others about the user leaving
        await self.broadcast_active_users()

        # Remove cursor from other clients
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_left',
                'user_id': self.user.id
            }
        )

    # Receive message from WebSocket
    async def receive(self, text_data):
        data = json.loads(text_data)
        message_type = data.get('type')

        if message_type == 'delta':
            delta_ops = data.get('delta')  # Now expecting a list of operations
            if delta_ops:
                # Update the document content with the delta
                await self.update_document_content(delta_ops)

                # Broadcast the delta to other clients
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'broadcast_delta',  # Use 'broadcast_delta' as event type
                        'delta': delta_ops,
                        'sender_channel_name': self.channel_name
                    })
            else:
                # Handle cases where delta is missing or invalid
                await self.send(text_data=json.dumps({
                    'type': 'error',
                    'message': 'Invalid delta received.'
                }))
        elif message_type == 'cursor':
            range = data.get('range')
            if range is not None:
                # Broadcast cursor position to other clients
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'cursor_position',
                        'user_id': self.user.id,
                        'username': self.user.username,
                        'range': range,
                        'color': self.color,
                        'sender_channel_name': self.channel_name
                    }
                )
        elif message_type == 'comment':
            # Handle new comment
            comment_data = data.get('comment')
            if comment_data:
                # Create comment and get updated data with ID
                comment_data = await self.create_comment(comment_data)
                # Broadcast the comment to other clients
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'broadcast_comment',
                        'comment': comment_data,
                        'user_id': self.user.id,
                        'username': self.user.username
                    }
                )
        elif message_type == 'resolve_comment':
            # Handle comment resolution
            comment_id = data.get('comment_id')
            if comment_id:
                await self.resolve_comment(comment_id)
                # Broadcast the resolution to other clients
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'broadcast_resolve_comment',
                        'comment_id': comment_id
                    }
                )
        # New method to create a comment
    @sync_to_async
    def create_comment(self, comment_data):
        document = Document.objects.get(pk=self.document_id)
        comment = Comment.objects.create(
            document=document,
            user=self.user,
            range=comment_data['range'],
            content=comment_data['content']
        )
        # Add comment ID to comment_data
        comment_data['id'] = comment.id
        return comment_data

    # New method to resolve a comment
    @sync_to_async
    def resolve_comment(self, comment_id):
        try:
            comment = Comment.objects.get(pk=comment_id)
            comment.resolved = True
            comment.save()
        except Comment.DoesNotExist:
            pass

    # Event handler to broadcast a new comment
    async def broadcast_comment(self, event):
        comment = event['comment']
        await self.send(text_data=json.dumps({
            'type': 'comment',
            'comment': comment,
            'user_id': event['user_id'],
            'username': event['username']
        }))

    # Event handler to broadcast comment resolution
    async def broadcast_resolve_comment(self, event):
        await self.send(text_data=json.dumps({
            'type': 'resolve_comment',
            'comment_id': event['comment_id']
        }))

    async def update_document_content(self, delta_ops):
        await self.apply_delta_to_document(delta_ops)


    @sync_to_async
    def apply_delta_to_document(self, delta_ops):
        document = Document.objects.get(pk=self.document_id)
        current_content = json.loads(document.content) if document.content else {'ops': []}

        # Apply the delta to the current content
        new_content = self.apply_quill_delta(current_content['ops'], delta_ops)

        # Save the updated content
        document.content = json.dumps({'ops': new_content})
        document.save()

    def apply_quill_delta(self, current_ops, delta_ops):
        current_delta = Delta(current_ops)
        delta_obj = Delta(delta_ops)
        new_delta = current_delta.compose(delta_obj)
        return new_delta.ops

    # Event handler for 'broadcast_delta' messages
    async def broadcast_delta(self, event):
        delta_ops = event['delta']
        sender_channel_name = event['sender_channel_name']

        # Do not send the delta back to the sender
        if self.channel_name != sender_channel_name:
            await self.send(text_data=json.dumps({
                'type': 'delta',
                'delta': delta_ops
            }))

    # Receive cursor position from room group
    async def cursor_position(self, event):
        sender_channel_name = event['sender_channel_name']

        # Do not send the cursor position back to the sender
        if self.channel_name != sender_channel_name:
            await self.send(text_data=json.dumps({
                'type': 'cursor',
                'user_id': event['user_id'],
                'username': event['username'],
                'range': event['range'],
                'color': event['color']
            }))

    # Handle user leaving
    async def user_left(self, event):
        await self.send(text_data=json.dumps({
            'type': 'user_left',
            'user_id': event['user_id']
        }))

    # Broadcast active users list
    async def broadcast_active_users(self):
        active_users = await self.get_active_users()
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'active_users',
                'users': active_users
            }
        )

    async def active_users(self, event):
        # Send active users list to client
        await self.send(text_data=json.dumps({
            'type': 'active_users',
            'users': event['users']
        }))

    @sync_to_async
    def get_document(self):
        return Document.objects.get(pk=self.document_id)

    @sync_to_async
    def check_permission(self):
        document = Document.objects.get(pk=self.document_id)
        return self.user in document.collaborators.all()

    @sync_to_async
    def add_active_user(self):
        if self.room_group_name not in self.active_users_dict:
            self.active_users_dict[self.room_group_name] = {}
        self.active_users_dict[self.room_group_name][self.user.id] = {
            'username': self.user.username,
            'color': self.color
        }

    @sync_to_async
    def remove_active_user(self):
        if self.room_group_name in self.active_users_dict:
            self.active_users_dict[self.room_group_name].pop(self.user.id, None)
            if not self.active_users_dict[self.room_group_name]:
                del self.active_users_dict[self.room_group_name]

    @sync_to_async
    def get_active_users(self):
        users = []
        if self.room_group_name in self.active_users_dict:
            for user_id, info in self.active_users_dict[self.room_group_name].items():
                users.append({
                    'user_id': user_id,
                    'username': info['username'],
                    'color': info['color']
                })
        return users

    @sync_to_async
    def get_user_color(self, user_id):
        # Assign a consistent color based on user ID
        random.seed(user_id)
        colors = ['#FF0000', '#00FF00', '#0000FF', '#FF00FF', '#00FFFF', '#FFFF00']
        return random.choice(colors)

# FILE: ./editor/__init__.py

# FILE: ./editor/apps.py
from django.apps import AppConfig


class EditorConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "editor"

# FILE: ./editor/forms.py
# editor/forms.py

from django import forms
from .models import Document
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class DocumentForm(forms.ModelForm):
    collaborators = forms.ModelMultipleChoiceField(
        queryset=User.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False,
        label="Share with"
    )

    class Meta:
        model = Document
        fields = ['title', 'collaborators']

class RegisterForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']

class CollaboratorsForm(forms.ModelForm):
    collaborators = forms.ModelMultipleChoiceField(
        queryset=User.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False,
        label="Share with"
    )

    class Meta:
        model = Document
        fields = ['collaborators']
# FILE: ./editor/admin.py
from django.contrib import admin

# Register your models here.

# FILE: ./editor/routing.py
# editor/routing.py

from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'^ws/document/(?P<document_id>\d+)/$', consumers.DocumentConsumer.as_asgi()),
]

# FILE: ./editor/tests.py
from django.test import TestCase

# Create your tests here.

# FILE: ./editor/urls.py
# editor/urls.py

from django.urls import path
from django.contrib.auth import views as auth_views
from . import views

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('', views.document_list, name='document_list'),
    path('document/new/', views.document_create, name='document_create'),
    path('document/<int:pk>/edit/', views.document_edit, name='document_edit'),
    path('document/<int:pk>/delete/', views.document_delete, name='document_delete'),
    path('document/<int:pk>/get_comments/', views.get_comments, name='get_comments'),


]

# FILE: ./editor/views.py
# editor/views.py

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login
from .forms import RegisterForm, DocumentForm, CollaboratorsForm 
from .models import Document, Comment
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse, HttpResponseBadRequest
from django.views.decorators.csrf import csrf_exempt
import json

def register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('document_list')
    else:
        form = RegisterForm()
    return render(request, 'register.html', {'form': form})

@login_required
def document_list(request):
    # Include documents where the user is a collaborator
    documents = Document.objects.filter(collaborators=request.user)
    return render(request, 'document_list.html', {'documents': documents})

@login_required
def document_create(request):
    if request.method == 'POST':
        form = DocumentForm(request.POST)
        if form.is_valid():
            document = form.save(commit=False)
            document.save()
            form.save_m2m()  # Save the collaborators
            document.collaborators.add(request.user)  # Add the creator as a collaborator
            return redirect('document_edit', pk=document.pk)
    else:
        form = DocumentForm()
    return render(request, 'document_create.html', {'form': form})

@csrf_exempt  # Add this decorator
@login_required
def document_edit(request, pk):
    document = get_object_or_404(Document, pk=pk, collaborators=request.user)
    if request.method == 'POST':
        if request.content_type == 'application/json':
            # Handle AJAX request for title update
            data = json.loads(request.body)
            new_title = data.get('title')
            if new_title:
                document.title = new_title
                document.save()
                return JsonResponse({'status': 'success'})
            else:
                return HttpResponseBadRequest('Invalid title')
        elif 'form_type' in request.POST and request.POST.get('form_type') == 'collaborators_form':
            # Handle collaborators form submission
            collaborators_form = CollaboratorsForm(request.POST, instance=document)
            if collaborators_form.is_valid():
                collaborators_form.save()
                return redirect('document_edit', pk=document.pk)
            else:
                print(collaborators_form.errors)
        else:
            return HttpResponseBadRequest('Invalid form submission')
    else:
        collaborators_form = CollaboratorsForm(instance=document)
    return render(request, 'editor.html', {'document': document, 'collaborators_form': collaborators_form})

@login_required
def document_delete(request, pk):
    document = get_object_or_404(Document, pk=pk, collaborators=request.user)
    if request.method == 'POST':
        document.delete()
        return redirect('document_list')
    return render(request, 'document_confirm_delete.html', {'document': document})

@login_required
def get_comments(request, pk):
    document = get_object_or_404(Document, pk=pk, collaborators=request.user)
    comments = document.comments.filter(resolved=False).select_related('user')
    comments_list = []
    for comment in comments:
        comments_list.append({
            'id': comment.id,
            'range': comment.range,
            'content': comment.content,
            'username': comment.user.username,
        })
    return JsonResponse({'comments': comments_list})
