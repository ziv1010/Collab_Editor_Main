
# FILE: ./collaborative_text_editor/asgi.py
# collaborative_text_editor/asgi.py

import os

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'collaborative_text_editor.settings')

import django
django.setup()

from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
from django.core.asgi import get_asgi_application
from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler  # Add this import
import editor.routing

application = ProtocolTypeRouter({
    "http": ASGIStaticFilesHandler(get_asgi_application()),  # Wrap with ASGIStaticFilesHandler
    "websocket": AuthMiddlewareStack(
        URLRouter(
            editor.routing.websocket_urlpatterns
        )
    ),
})

# FILE: ./collaborative_text_editor/__init__.py

# FILE: ./collaborative_text_editor/settings.py
"""
Django settings for collaborative_text_editor project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
# Set up templates directory
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)20lo0tmyxgox2conr)i8s+uewbk^oaqd#6bt#m&un7%q5oc+4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'channels',          # For WebSocket support
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'editor',            # Your app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'collaborative_text_editor.urls'

# settings.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'collaborative_text_editor.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True



# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ASGI application for Channels
ASGI_APPLICATION = 'collaborative_text_editor.asgi.application'

# Channel layers configuration (using In-Memory Channel Layer for development)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}



LOGIN_URL = 'login'

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Authentication settings
LOGIN_REDIRECT_URL = 'document_list'
LOGOUT_REDIRECT_URL = 'login'



# FILE: ./collaborative_text_editor/urls.py
"""collaborative_text_editor URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
# collaborative_text_editor/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('editor.urls')),
]

# FILE: ./collaborative_text_editor/wsgi.py
"""
WSGI config for collaborative_text_editor project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'collaborative_text_editor.settings')

application = get_wsgi_application()

# FILE: ./static/css/styles.css
/* static/css/styles.css */

body {
    font-family: Arial, sans-serif;
}

header {
    background-color: #f2f2f2;
    padding: 10px;
}

main {
    margin: 20px;
}

#editor-container {
    height: 400px;
    border: 1px solid #ccc;
}
# FILE: ./templates/base.html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Collaborative Text Editor</title>
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
    {% block extra_head %}{% endblock %}
</head>
<body>
    <header>
        <h1>Collaborative Text Editor</h1>
        {% if user.is_authenticated %}
        <p>
            Welcome, {{ user.username }} |
            <form action="{% url 'logout' %}" method="post" style="display: inline;">
                {% csrf_token %}
                <button type="submit" style="background: none; border: none; padding: 0; margin: 0; font: inherit; color: blue; text-decoration: underline; cursor: pointer;">
                    Logout
                </button>
            </form>
        </p>
    {% else %}
        <p><a href="{% url 'login' %}">Login</a> | <a href="{% url 'register' %}">Register</a></p>
    {% endif %}
    </header>
    <main>
        {% block content %}{% endblock %}
    </main>
    {% block extra_script %}{% endblock %}
</body>
</html>
# FILE: ./templates/document_list.html
{% extends 'base.html' %}

{% block content %}
<h2>Your Documents</h2>
<ul>
    {% for document in documents %}
        <li>
            <a href="{% url 'document_edit' document.pk %}">{{ document.title }}</a>
            <!-- Delete Button -->
            <form action="{% url 'document_delete' document.pk %}" method="post" style="display: inline;">
                {% csrf_token %}
                <button type="submit" onclick="return confirm('Are you sure you want to delete this document?');">Delete</button>
            </form>
        </li>
    {% empty %}
        <li>No documents yet.</li>
    {% endfor %}
</ul>
<a href="{% url 'document_create' %}">Create New Document</a>
{% endblock %}

# FILE: ./templates/document_confirm_delete.html
{% extends 'base.html' %}

{% block content %}
<h2>Delete Document</h2>
<p>Are you sure you want to delete "{{ document.title }}"?</p>
<form method="post">
    {% csrf_token %}
    <button type="submit">Confirm Delete</button>
    <a href="{% url 'document_list' %}">Cancel</a>
</form>
{% endblock %}

# FILE: ./templates/register.html
{% extends 'base.html' %}

{% block content %}
<h2>Register</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Register</button>
</form>
{% endblock %}
# FILE: ./templates/editor.html
{% extends 'base.html' %}

{% block extra_head %}
<!-- Include Quill stylesheet -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<!-- Include quill-cursors stylesheet -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/quill-cursors@1.0.3/dist/quill-cursors.css">
{% endblock %}

{% block content %}
<h2>{{ document.title }}</h2>
<!-- Back to Documents Link -->
<p><a href="{% url 'document_list' %}">Back to Your Documents</a></p>

<!-- Form to edit document title and collaborators -->
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Update Document</button>
</form>

<!-- Active Users List -->
<div id="active-users" style="margin-top: 20px;">
    <h3>Active Users:</h3>
    <!-- Active users will be listed here -->
</div>

<!-- Editor container -->
<div id="editor-container"></div>
{% endblock %}

{% block extra_script %}
<!-- Include Quill library -->
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<!-- Include quill-cursors script -->
<script src="https://cdn.jsdelivr.net/npm/quill-cursors@1.0.3/dist/quill-cursors.min.js"></script>

<!-- Initialize Quill editor and WebSocket -->
<script>
    // Include the QuillCursors module
    var QuillCursors = window.QuillCursors;
    Quill.register('modules/cursors', QuillCursors);

    // Initialize Quill editor with the cursors module enabled
    var quill = new Quill('#editor-container', {
        theme: 'snow',
        modules: {
            cursors: true
        }
    });

    var cursors = quill.getModule('cursors');

    // Track whether the editor is applying remote changes
    var applyingRemoteChange = false;

    // Set up WebSocket connection
    var ws_scheme = window.location.protocol == "https:" ? "wss" : "ws";
    var documentId = "{{ document.pk }}";
    var socketUrl = ws_scheme + '://' + window.location.host + '/ws/document/' + documentId + '/';
    var socket = new WebSocket(socketUrl);

    socket.onopen = function(e) {
        console.log('WebSocket connection established.');
        // Send initial cursor position
        sendCursorPosition();
    };

    socket.onmessage = function(e) {
    var data = JSON.parse(e.data);
    if (data.type === 'init') {
        // Set the initial content
        quill.setContents(data.content);
    } else if (data.type === 'delta') {
        // Apply the delta to the Quill editor
        applyingRemoteChange = true;
        quill.updateContents({ ops: data.delta });
        applyingRemoteChange = false;
        } else if (data.type === 'cursor') {
            // Update cursor position
            if (data.user_id !== parseInt("{{ user.id }}")) {
                cursors.createCursor(data.user_id, data.username, data.color);
                cursors.moveCursor(data.user_id, data.range);
            }
        } else if (data.type === 'user_left') {
            // Remove cursor when user disconnects
            cursors.removeCursor(data.user_id);
        } else if (data.type === 'active_users') {
            // Update the list of active users
            updateActiveUsersList(data.users);
        }
    };

    socket.onerror = function(e) {
        console.error('WebSocket error:', e);
    };

    socket.onclose = function(e) {
        console.log('WebSocket connection closed.');
    };

    // Send changes to the server
    quill.on('text-change', function(delta, oldDelta, source) {
        if (source === 'user') {
            var deltaOps = delta.ops;  // Extract the 'ops' array
            var message = JSON.stringify({'type': 'delta', 'delta': deltaOps});
            socket.send(message);
        }
    });


    // Send cursor position to the server
    quill.on('selection-change', function(range, oldRange, source) {
        if (source === 'user' && range) {
            sendCursorPosition();
        }
    });

    function sendCursorPosition() {
        var range = quill.getSelection();
        if (range) {
            var message = JSON.stringify({
                'type': 'cursor',
                'range': range
            });
            socket.send(message);
        }
    }

    // Function to update active users list
    function updateActiveUsersList(users) {
        var activeUsersContainer = document.getElementById('active-users');
        if (activeUsersContainer) {
            activeUsersContainer.innerHTML = '';
            users.forEach(function(user) {
                var userElement = document.createElement('div');
                userElement.textContent = user.username;
                activeUsersContainer.appendChild(userElement);
            });
        }
    }
</script>

{% endblock %}

# FILE: ./templates/login.html
{% extends 'base.html' %}

{% block content %}
<h2>Login</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Login</button>
</form>
{% endblock %}
# FILE: ./templates/document_create.html
{% extends 'base.html' %}

{% block content %}
<h2>Create New Document</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Create</button>
</form>
{% endblock %}

# FILE: ./manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'collaborative_text_editor.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

# FILE: ./editor/migrations/0003_remove_document_owner_document_collaborators.py
# Generated by Django 5.1.3 on 2024-11-14 22:05

from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("editor", "0002_alter_document_content"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name="document",
            name="owner",
        ),
        migrations.AddField(
            model_name="document",
            name="collaborators",
            field=models.ManyToManyField(
                related_name="documents", to=settings.AUTH_USER_MODEL
            ),
        ),
    ]

# FILE: ./editor/migrations/__init__.py

# FILE: ./editor/migrations/0001_initial.py
# Generated by Django 5.1.3 on 2024-11-14 11:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]

# FILE: ./editor/migrations/0002_alter_document_content.py
# Generated by Django 5.1.3 on 2024-11-14 21:34

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("editor", "0001_initial"),
    ]

    operations = [
        migrations.AlterField(
            model_name="document",
            name="content",
            field=models.TextField(blank=True, default=""),
        ),
    ]

# FILE: ./editor/models.py
# editor/models.py

from django.db import models
from django.contrib.auth.models import User

class Document(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField(blank=True, default='')  # Store the document content as JSON
    # Remove the owner field
    # owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='documents')
    # Add collaborators field
    collaborators = models.ManyToManyField(User, related_name='documents')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
        
    def __str__(self):
        return self.title

# FILE: ./editor/consumers.py
# editor/consumers.py

from channels.generic.websocket import AsyncWebsocketConsumer
from asgiref.sync import sync_to_async
from .models import Document
from django.contrib.auth.models import User
import json
import random
from delta import Delta  # Ensure this is the correct package

class DocumentConsumer(AsyncWebsocketConsumer):
    active_users_dict = {}   # Class variable to keep track of active users

    async def connect(self):
        self.document_id = self.scope['url_route']['kwargs']['document_id']
        self.room_group_name = f'document_{self.document_id}'
        self.user = self.scope["user"]
        self.color = await self.get_user_color(self.user.id)  # Assign a color to the user

        # Authenticate user
        if self.user.is_anonymous:
            await self.close()
        else:
            # Check if the user is a collaborator
            has_permission = await self.check_permission()
            if not has_permission:
                await self.close()
            else:
                # Add user to active users
                await self.add_active_user()

                # Join room group
                await self.channel_layer.group_add(
                    self.room_group_name,
                    self.channel_name
                )

                await self.accept()

                # Send the initial content
                document = await self.get_document()
                content = json.loads(document.content) if document.content else {'ops': []}
                await self.send(text_data=json.dumps({
                    'type': 'init',
                    'content': content
                }))

                # Notify others about the new active user
                await self.broadcast_active_users()

    async def disconnect(self, close_code):
        # Remove user from active users
        await self.remove_active_user()

        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

        # Notify others about the user leaving
        await self.broadcast_active_users()

        # Remove cursor from other clients
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_left',
                'user_id': self.user.id
            }
        )

    # Receive message from WebSocket
    async def receive(self, text_data):
        data = json.loads(text_data)
        message_type = data.get('type')

        if message_type == 'delta':
            delta_ops = data.get('delta')  # Now expecting a list of operations
            if delta_ops:
                # Update the document content with the delta
                await self.update_document_content(delta_ops)

                # Broadcast the delta to other clients
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'broadcast_delta',  # Use 'broadcast_delta' as event type
                        'delta': delta_ops,
                        'sender_channel_name': self.channel_name
                    })
            else:
                # Handle cases where delta is missing or invalid
                await self.send(text_data=json.dumps({
                    'type': 'error',
                    'message': 'Invalid delta received.'
                }))
        elif message_type == 'cursor':
            range = data.get('range')
            if range is not None:
                # Broadcast cursor position to other clients
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'cursor_position',
                        'user_id': self.user.id,
                        'username': self.user.username,
                        'range': range,
                        'color': self.color,
                        'sender_channel_name': self.channel_name
                    }
                )

    async def update_document_content(self, delta_ops):
        await self.apply_delta_to_document(delta_ops)


    @sync_to_async
    def apply_delta_to_document(self, delta_ops):
        document = Document.objects.get(pk=self.document_id)
        current_content = json.loads(document.content) if document.content else {'ops': []}

        # Apply the delta to the current content
        new_content = self.apply_quill_delta(current_content['ops'], delta_ops)

        # Save the updated content
        document.content = json.dumps({'ops': new_content})
        document.save()

    def apply_quill_delta(self, current_ops, delta_ops):
        current_delta = Delta(current_ops)
        delta_obj = Delta(delta_ops)
        new_delta = current_delta.compose(delta_obj)
        return new_delta.ops

    # Event handler for 'broadcast_delta' messages
    async def broadcast_delta(self, event):
        delta_ops = event['delta']
        sender_channel_name = event['sender_channel_name']

        # Do not send the delta back to the sender
        if self.channel_name != sender_channel_name:
            await self.send(text_data=json.dumps({
                'type': 'delta',
                'delta': delta_ops
            }))

    # Receive cursor position from room group
    async def cursor_position(self, event):
        sender_channel_name = event['sender_channel_name']

        # Do not send the cursor position back to the sender
        if self.channel_name != sender_channel_name:
            await self.send(text_data=json.dumps({
                'type': 'cursor',
                'user_id': event['user_id'],
                'username': event['username'],
                'range': event['range'],
                'color': event['color']
            }))

    # Handle user leaving
    async def user_left(self, event):
        await self.send(text_data=json.dumps({
            'type': 'user_left',
            'user_id': event['user_id']
        }))

    # Broadcast active users list
    async def broadcast_active_users(self):
        active_users = await self.get_active_users()
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'active_users',
                'users': active_users
            }
        )

    async def active_users(self, event):
        # Send active users list to client
        await self.send(text_data=json.dumps({
            'type': 'active_users',
            'users': event['users']
        }))

    @sync_to_async
    def get_document(self):
        return Document.objects.get(pk=self.document_id)

    @sync_to_async
    def check_permission(self):
        document = Document.objects.get(pk=self.document_id)
        return self.user in document.collaborators.all()

    @sync_to_async
    def add_active_user(self):
        if self.room_group_name not in self.active_users_dict:
            self.active_users_dict[self.room_group_name] = {}
        self.active_users_dict[self.room_group_name][self.user.id] = {
            'username': self.user.username,
            'color': self.color
        }

    @sync_to_async
    def remove_active_user(self):
        if self.room_group_name in self.active_users_dict:
            self.active_users_dict[self.room_group_name].pop(self.user.id, None)
            if not self.active_users_dict[self.room_group_name]:
                del self.active_users_dict[self.room_group_name]

    @sync_to_async
    def get_active_users(self):
        users = []
        if self.room_group_name in self.active_users_dict:
            for user_id, info in self.active_users_dict[self.room_group_name].items():
                users.append({
                    'user_id': user_id,
                    'username': info['username'],
                    'color': info['color']
                })
        return users

    @sync_to_async
    def get_user_color(self, user_id):
        # Assign a consistent color based on user ID
        random.seed(user_id)
        colors = ['#FF0000', '#00FF00', '#0000FF', '#FF00FF', '#00FFFF', '#FFFF00']
        return random.choice(colors)

# FILE: ./editor/__init__.py

# FILE: ./editor/apps.py
from django.apps import AppConfig


class EditorConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "editor"

# FILE: ./editor/forms.py
# editor/forms.py

from django import forms
from .models import Document
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class DocumentForm(forms.ModelForm):
    collaborators = forms.ModelMultipleChoiceField(
        queryset=User.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=False,
        label="Share with"
    )

    class Meta:
        model = Document
        fields = ['title', 'collaborators']

class RegisterForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']

# FILE: ./editor/admin.py
from django.contrib import admin

# Register your models here.

# FILE: ./editor/routing.py
# editor/routing.py

from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'^ws/document/(?P<document_id>\d+)/$', consumers.DocumentConsumer.as_asgi()),
]

# FILE: ./editor/tests.py
from django.test import TestCase

# Create your tests here.

# FILE: ./editor/urls.py
# editor/urls.py

from django.urls import path
from django.contrib.auth import views as auth_views
from . import views

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('', views.document_list, name='document_list'),
    path('document/new/', views.document_create, name='document_create'),
    path('document/<int:pk>/edit/', views.document_edit, name='document_edit'),
    path('document/<int:pk>/delete/', views.document_delete, name='document_delete'),

]

# FILE: ./editor/views.py
# editor/views.py

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login
from .forms import RegisterForm, DocumentForm
from .models import Document
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
import json


def register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('document_list')
    else:
        form = RegisterForm()
    return render(request, 'register.html', {'form': form})

@login_required
def document_list(request):
    # Include documents where the user is a collaborator
    documents = Document.objects.filter(collaborators=request.user)
    return render(request, 'document_list.html', {'documents': documents})

@login_required
def document_create(request):
    if request.method == 'POST':
        form = DocumentForm(request.POST)
        if form.is_valid():
            document = form.save(commit=False)
            document.save()
            form.save_m2m()  # Save the collaborators
            document.collaborators.add(request.user)  # Add the creator as a collaborator
            return redirect('document_edit', pk=document.pk)
    else:
        form = DocumentForm()
    return render(request, 'document_create.html', {'form': form})

@login_required
def document_edit(request, pk):
    document = get_object_or_404(Document, pk=pk, collaborators=request.user)
    if request.method == 'POST':
        form = DocumentForm(request.POST, instance=document)
        if form.is_valid():
            form.save()
            return redirect('document_edit', pk=document.pk)
    else:
        form = DocumentForm(instance=document)
    return render(request, 'editor.html', {'document': document, 'form': form})

@login_required
def document_delete(request, pk):
    document = get_object_or_404(Document, pk=pk, collaborators=request.user)
    if request.method == 'POST':
        document.delete()
        return redirect('document_list')
    return render(request, 'document_confirm_delete.html', {'document': document})
